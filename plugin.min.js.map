{
  "version": 3,
  "sources": ["plugin.js"],
  "sourcesContent": ["(function videoPlugin(tinymce) {\n  \"use strict\";\n\n  const PROVIDERS = [\"youtube\", \"vimeo\"];\n  PROVIDERS[\"youtube\"] = {\n    // https://youtu.be/$id\n    // https://www.youtube.com/watch?v=$id\n    // https://www.youtube.com/embed/$id\n    pattern: /youtu(?:\\.be|be\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-_]+)(?:\\?|&)?(.+)?/i,\n    api: \"//www.youtube.com/embed/\",\n    options: [\n      { name: \"rel\", type: \"checkbox\", text: \"Show suggested videos when the video finishes\" },\n      { name: \"controls\", type: \"checkbox\", text: \"Show player controls\" },\n      { name: \"showinfo\", type: \"checkbox\", text: \"Show video title and player actions\" }\n    ]\n  };\n  PROVIDERS[\"vimeo\"] = {\n    // https://vimeo.com/$id\n    // https://vimeo.com/*/*/video/$id\n    // https://vimeo.com/album/*/video/$id\n    // https://vimeo.com/channels/*/*\n    // https://vimeo.com/groups/*/videos/$id\n    // https://vimeo.com/ondemand/*/*\n    // https://player.vimeo.com/video/$id\n    pattern: /(?:player.)?vimeo.com\\/(?:video\\/)?([0-9]+)(?:\\?|&)?(.+)?/,\n    api: \"//player.vimeo.com/video/\",\n    options: [\n      { name: \"portrait\", type: \"checkbox\", \"text\": \"Show portrait in overlay\" },\n      { name: \"title\", type: \"checkbox\", \"text\": \"Show title in overlay\" },\n      { name: \"byline\", type: \"checkbox\", \"text\": \"Show byline in overlay\" }\n    ]\n  };\n\n  /**\n   * @typedef {Object} Video\n   * @property {string|number} id Video ID\n   * @property {string} provider The video provider, i.e., youtube, vimeo, etc...\n   * @property {string} url The embed URL\n   * @property {...any} option The rest of options.\n   */\n\n  /**\n   * Parses video URL into data object\n   *\n   * @param {string} url The video URL\n   * @returns {Video} The video data\n   */\n  function parseUrl(url) {\n    const data = {};\n\n    PROVIDERS.forEach(function buildData(name) {\n      const provider = PROVIDERS[name];\n      const matches = url.match(provider.pattern);\n      if (matches) {\n        data.name = name;\n        const id = matches[1];\n        const providerUrl = provider.api + id;\n        data.url = providerUrl;\n        return data;\n      }\n    });\n\n    //if data is an empty object, then it is not a known provider\n    if (Object.keys(data).length === 0) {\n      return false;\n    } else {\n      return data;\n    }\n  }\n\n  function Plugin(editor, url) {\n    this.showDialog = this.showDialog.bind(this);\n    this.render = this.render.bind(this);\n    const plugin = this;\n    plugin.editor = editor;\n    plugin.currentProvider = null;\n    this.configs = {};\n\n    const baseConfig = {\n      title: \"Insert a video\",\n      initialData: {},\n      body: {\n        type: \"panel\",\n        items: []\n      },\n      buttons: [\n        {\n          type: \"cancel\",\n          name: \"cancel\",\n          text: \"Cancel\"\n        },\n        {\n          type: \"submit\",\n          name: \"save\",\n          text: \"Save\",\n          primary: true\n        }\n      ],\n      onChange: function onChange(api) {\n        plugin.providerChange(api);\n        plugin.render();\n      },\n      onSubmit: function onSubmit(api) {\n        plugin.onsubmit();\n        api.close();\n      }\n    };\n\n    const sharedFields = [\n      {\n        type: \"input\",\n        label: \"Source\",\n        name: \"url\",\n      },\n      {\n        type: \"grid\",\n        columns: 3,\n        items: [\n          {\n            type: \"input\",\n            label: \"Width\",\n            name: \"width\",\n          },\n          {\n            type: \"input\",\n            label: \"Height\",\n            name: \"height\",\n          },\n          {\n            type: \"checkbox\",\n            label: \"Fullscreen\",\n            name: \"fullscreen\",\n          }\n        ]\n      },\n    ];\n\n    const unkownFields = [ ...sharedFields, ...[\n        {\n          type: \"htmlpanel\",\n          html: \"<div id='preview'></div>\",\n        }\n      ]\n    ];\n\n    const youtubeFields = [ ...sharedFields, ...[\n        {\n          type: \"checkbox\",\n          label: \"Show suggested videos when the video finishes\",\n          name: \"rel\",\n        },\n        {\n          type: \"checkbox\",\n          label: \"Show player controls\",\n          name: \"controls\",\n        },\n        {\n          type: \"checkbox\",\n          label: \"Show video title and player actions\",\n          name: \"showinfo\",\n        },\n        {\n          type: \"htmlpanel\",\n          html: \"<div id='preview'></div>\",\n        }\n      ]\n    ];\n\n    const vimeoFields = [ ...sharedFields, ...[\n        {\n          type: \"checkbox\",\n          label: \"Show portrait in overlay\",\n          name: \"portrait\",\n        },\n        {\n          type: \"checkbox\",\n          label: \"Show title in overlay\",\n          name: \"title\",\n        },\n        {\n          type: \"checkbox\",\n          label: \"Show byline in overlay\",\n          name: \"byline\",\n        },\n        {\n          type: \"htmlpanel\",\n          html: \"<div id='preview'></div>\",\n        }\n      ]\n    ];\n\n    this.configs[\"unknown\"] = { ...baseConfig, ...{\n        body: {\n          type: \"panel\",\n          items: unkownFields\n        }\n      }\n    };\n\n    this.configs[\"youtube\"] = { ...baseConfig, ...{\n        body: {\n          type: \"panel\",\n          items: youtubeFields\n        }\n      }\n    };\n\n    this.configs[\"vimeo\"] = { ...baseConfig, ...{\n        body: {\n          type: \"panel\",\n          items: vimeoFields\n        }\n      }\n    };\n\n    const mapSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\" viewBox=\"0 0 48 48\" xml:space=\"preserve\"><g><g><g>\n      <path d=\"M44,4.982H4c-2.2,0-4,1.8-4,4v30.036c0,2.2,1.8,4,4,4h40c2.2,0,4-1.8,4-4V8.982C48,6.782,46.2,4.982,44,4.982z M20.204,12.789l9.593,6.55l-9.593,6.55V12.789z M40.001,35.212H18.875c-0.57,1.239-1.816,2.104-3.27,2.104 s-2.699-0.866-3.27-2.104H8c-0.829,0-1.5-0.673-1.5-1.5c0-0.828,0.671-1.5,1.5-1.5h4.336c0.57-1.24,1.815-2.106,3.27-2.106 s2.7,0.866,3.27,2.106h21.126c0.828,0,1.5,0.672,1.5,1.5C41.502,34.54,40.829,35.212,40.001,35.212z\" fill=\"#333333\"/>\n      <circle cx=\"15.605\" cy=\"33.712\" r=\"1.397\" fill=\"#333333\"/>\n    </g></g></g></svg>`;\n\n    editor.ui.registry.addIcon(\"video\", mapSVG);\n\n    // Add a button that opens a window\n    editor.ui.registry.addButton(\"video\", {\n      icon: \"video\",\n      tooltip: \"Insert/edit video\",\n      onAction: (_) => plugin.showDialog()\n    });\n\n    editor.ui.registry.addMenuItem(\"video\", {\n      icon: \"video\",\n      text: \"Video\",\n      onAction: (_) => plugin.showDialog(),\n      context: \"insert\"\n    });\n  }\n\n  /**\n   * Parses selected video and display dialog for it\n   *\n   * If there is a selected video, it will parse information out of it,\n   * such as the source URL, the dimensions, etc...\n   *\n   * It then uses the information to display the dialog.\n  */\n  Plugin.prototype.showDialog = function showDialog() {\n    const editor = this.editor;\n    const dom = editor.dom;\n    const params = {};\n    const plugin = this;\n\n    // Parse the current map source for values to insert into\n    // the dialog inputs.\n    let videoElement = editor.selection.getNode();\n\n    if (videoElement) {\n      let url = dom.getAttrib(videoElement, \"src\");\n\n      if (!url) {\n        // This is the element used by TinyMCE to wrap the iframe.\n        videoElement = videoElement.children[0];\n        url = dom.getAttrib(videoElement, \"src\");\n      }\n\n      params.url = url;\n\n      const allowFullscreen = dom.getAttrib(videoElement, \"allowfullscreen\");\n      if (allowFullscreen) {\n        params.fullscreen = true;\n      }\n\n      params.width = dom.getAttrib(videoElement, \"width\");\n      params.height = dom.getAttrib(videoElement, \"height\");\n    }\n\n    if (!params.width) {\n      params.width = \"400\";\n    }\n    if (!params.height) {\n      params.height = \"300\";\n    }\n\n    // Reset this so `.render` runs correctly.\n    this.window = null;\n\n    const provider = parseUrl(params.url);\n    if (provider.name === \"youtube\" || provider.name === \"vimeo\") {\n      const queryString = params.url.split(\"?\")[1];\n      const queryParams = new URLSearchParams(queryString);\n      const options = PROVIDERS[provider.name].options || [];\n      params.url = provider.url;\n      options.forEach(function buildParams(option) {\n        const name = option.name;\n        const value = queryParams.get(name);\n\n        if (value === \"0\" || value === false) {\n          params[name] = false;\n        } else {\n          params[name] = true;\n        }\n      });\n      let config = this.configs[provider.name];\n      config.initialData = params;\n      this.currentProvider = provider.name;\n      this.window = this.editor.windowManager.open(config);\n    } else {\n      let config = this.configs[\"unknown\"];\n      config.initialData = params;\n      this.currentProvider = null;\n      this.window = this.editor.windowManager.open(config);\n    }\n\n    plugin.render();\n  }\n\n  /**\n   * Handles change in provider. Loads the correct dialog when video provider is changed.\n   */\n\n  Plugin.prototype.providerChange = function providerChange(api) {\n    const data = api.getData();\n    const provider = parseUrl(data.url);\n    if (provider.name === this.currentProvider || (this.currentProvider === null && provider === false)) {\n      return;\n    }\n\n    if (provider.name === \"youtube\") {\n      data.rel = true;\n      data.controls = true;\n      data.showinfo = true;\n      let config = this.configs[provider.name];\n      config.initialData = data;\n      api.redial(config);\n      this.currentProvider = provider.name;\n    } else if (provider.name === \"vimeo\") {\n      data.portrait = true;\n      data.title = true;\n      data.byline = true;\n      let config = this.configs[provider.name];\n      config.initialData = data;\n      api.redial(config);\n      this.currentProvider = provider.name;\n    } else {\n      let config = this.configs[\"unknown\"];\n      config.initialData = data;\n      api.redial(config);\n      this.currentProvider = null;\n    }\n  };\n\n  /**\n   * Renders video option inputs and preview panel.\n   *\n   * Different video provider has different option set, so\n   * we need to load different inputs depending on the URL.\n   *\n   * It then also renders the preview panel for the video.\n   */\n  Plugin.prototype.render = function render() {\n    const data = this.window.getData();\n    let html = this.html(true);\n\n    const url = data.url;\n    if (!url) {\n      return \"\";\n    }\n\n    html = this.html(true);\n\n    const preview = $AM.find(\"#preview\")[0];\n    preview.innerHTML = html;\n\n    return html;\n  }\n\n  /**\n   * Generates the HTML for the iframe.\n   */\n  Plugin.prototype.html = function html(useInlineStyle) {\n    const data = this.window.getData();\n    let embedUrl = data.url;\n    const provider = parseUrl(data.url);\n\n    const queries = [];\n    if (provider) {\n      const options = PROVIDERS[provider.name].options || [];\n      options.forEach(function buildQueries(option) {\n        const name = option.name;\n        const value = data[name];\n\n        if (value === \"0\" || value === false) {\n          queries.push(name + \"=\" + 0);\n        }\n      });\n      embedUrl = provider.url;\n    }\n\n    if (queries.length) {\n      embedUrl += \"?\" + queries.join(\"&\");\n    }\n\n    const width = data.width;\n    const height = data.height;\n\n    let html = \"<iframe\" +\n      \" src='\" + embedUrl + \"'\" +\n      \" width='\" + width + \"' height='\" + height + \"'\";\n    if (data.fullscreen) {\n      html += \" allowfullscreen\";\n    }\n    if (useInlineStyle) {\n      html += \" style='width: \" + width + \"px; height: \" + height + \"px;'\";\n    }\n    html += \" ></iframe>\";\n\n    return html;\n  };\n\n  Plugin.prototype.onsubmit = function onSubmit() {\n    // Insert content when the window form is submitted\n    this.editor.insertContent(this.html());\n  };\n\n  // Register plugin\n  tinymce.PluginManager.add(\"video\", (editor, url) => {\n    let plugin = new Plugin(editor, url);\n    return {\n      getMetadata: () => ({\n        name: \"Video - Add embeded video easily.\",\n        url: \"http://www.brandextract.com\",\n      })\n    };\n  });\n})(window.tinymce);\n"],
  "mappings": "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",
  "names": ["tinymce", "PROVIDERS", "parseUrl", "url", "data", "name", "provider", "matches", "id", "providerUrl", "Plugin", "editor", "plugin", "baseConfig", "api", "sharedFields", "unkownFields", "youtubeFields", "vimeoFields", "__spreadProps", "__spreadValues", "_", "dom", "params", "videoElement", "queryString", "queryParams", "options", "option", "value", "config", "html", "preview", "useInlineStyle", "embedUrl", "queries", "width", "height"]
}
